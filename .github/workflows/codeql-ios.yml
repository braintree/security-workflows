name: CodeQL (iOS)

on:
  workflow_call:
    inputs:
      workspace:
        description: 'Optional override. Autodetected if empty.'
        required: false
        type: string
      scheme:
        description: 'Optional override. Defaults to Demo.'
        required: false
        type: string
      filter-patterns:
        description: 'Optional comma-separated list of filter patterns'
        required: false
        type: string

permissions:
  security-events: write
  actions: read
  contents: read
  packages: read

jobs:
  code-scanning:
    name: Code Scanning
    runs-on: macos-14
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode (Swift 5.9+)
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Input validation: Demo scheme + BraintreeDropIn.xcworkspace
      - name: Validate inputs
        shell: python
        env:
          PROJECT: ${{ inputs.project }}
          SCHEME: ${{ inputs.scheme }}
          WORKSPACE: ${{ inputs.workspace }}
        run: |
          import os, sys
          allowed_schemes = ("Demo", "BraintreeDropIn")  # allow library-only builds too
          allowed_workspaces = ("BraintreeDropIn.xcworkspace", "Braintree.xcworkspace", "", None)
          allowed_projects = ("Demo/Demo.xcodeproj", "Demo.xcodeproj", "BraintreeDropIn.xcodeproj", "", None)

          project = os.getenv("PROJECT")
          scheme = os.getenv("SCHEME")
          workspace = os.getenv("WORKSPACE")

          if scheme not in allowed_schemes:
              raise SystemExit(f"Invalid scheme: {scheme}. Allowed: {allowed_schemes}")
          if workspace not in allowed_workspaces:
              raise SystemExit(f"Invalid workspace: {workspace}. Allowed: {allowed_workspaces}")
          if project not in allowed_projects:
              raise SystemExit(f"Invalid project: {project}. Allowed: {allowed_projects}")

          print("Inputs validated successfully.")
          
      # Detect repo type + set workspace/scheme + whether to run CocoaPods
      - name: Detect project
        id: detect
        run: |
          WORKSPACE_INPUT="${{ inputs.workspace }}"
          SCHEME_INPUT="${{ inputs.scheme }}"
          if [[ -n "$WORKSPACE_INPUT" ]]; then
            WORKSPACE="$WORKSPACE_INPUT"
          elif [[ -e "Braintree.xcworkspace" ]]; then
            # braintree_ios
            WORKSPACE="Braintree.xcworkspace"
            echo "NEEDS_PODS=true" >> "$GITHUB_ENV"
          elif [[ -e "BraintreeDropIn.xcworkspace" ]]; then
            # braintree-ios-drop-in
            WORKSPACE="BraintreeDropIn.xcworkspace"
            echo "NEEDS_PODS=false" >> "$GITHUB_ENV"
          else
            echo "No known workspace found"; exit 1
          fi

          SCHEME="${SCHEME_INPUT:-Demo}"

          echo "WORKSPACE=$WORKSPACE" >> "$GITHUB_ENV"
          echo "SCHEME=$SCHEME" >> "$GITHUB_ENV"
          echo "Workspace: $WORKSPACE"
          echo "Scheme: $SCHEME"

      # Only needed for braintree_ios Demo (CocoaPods)
      - name: Install CocoaPods (SDK demo)
        if: env.NEEDS_PODS == 'true'
        run: pod install

      # Cache SwiftPM to speed up both repos
      - name: Cache SwiftPM
        uses: actions/cache@v4
        with:
          path: |
            ~/.swiftpm
            ~/Library/Caches/org.swift.swiftpm
            ${{ github.workspace }}/DerivedData/SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: ${{ runner.os }}-spm-

      # Resolve Swift packages for the chosen workspace/scheme
      - name: Resolve Swift Packages
        run: |
          xcodebuild -resolvePackageDependencies \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -derivedDataPath "$GITHUB_WORKSPACE/DerivedData" \
            -clonedSourcePackagesDirPath SourcePackages

      - name: Initialize CodeQL (manual)
        uses: github/codeql-action/init@v3
        with:
          languages: swift
          build-mode: manual
          # optional inline "advanced" config:
          # config: |
          #   queries:
          #     - uses: security-extended
          #     - uses: security-and-quality

      - name: Build (under CodeQL)
        run: |
          set -o pipefail
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 15' \
            -derivedDataPath "$GITHUB_WORKSPACE/DerivedData" \
            -clonedSourcePackagesDirPath SourcePackages \
            -scmProvider system \
            CODE_SIGN_IDENTITY= CODESIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO \
            clean build

      - name: Analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:swift"
          output: sarif-results
          upload: failure-only

      - name: Process & Upload SARIF
        uses: braintree/security-workflows/.github/actions/upload-sarif@main
        with:
          sarif_dir: ${{ env.CODEQL_ACTION_SARIF_RESULTS_OUTPUT_DIR }}
          filter_patterns: ${{ inputs['filter-patterns'] }}
