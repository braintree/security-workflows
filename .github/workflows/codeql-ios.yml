name: CodeQL (iOS)

on:
  workflow_call:
    inputs:
      project:
        description: 'xcodebuild project arg (not used when workspace is set)'
        required: false
        type: string
      scheme:
        description: 'xcodebuild scheme arg'
        required: true
        type: string
      workspace:
        description: 'xcodebuild workspace arg'
        required: true
        type: string
      filter-patterns:
        description: 'Optional comma-separated list of filter patterns'
        required: false
        type: string

permissions:
  security-events: write
  packages: read
  actions: read
  contents: read

defaults:
  run:
    shell: bash

jobs:
  code-scanning:
    name: Code Scanning
    runs-on: macos-14
    timeout-minutes: 30
    strategy:
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Ensure a known-good toolchain for this repo (Xcode 15.x required by Drop-in)
      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Input validation: Demo scheme + BraintreeDropIn.xcworkspace
      - name: Validate inputs
        shell: python
        env:
          PROJECT: ${{ inputs.project }}
          SCHEME: ${{ inputs.scheme }}
          WORKSPACE: ${{ inputs.workspace }}
        run: |
          import os, sys
          allowed_schemes = ("Demo", "BraintreeDropIn")  # allow library-only builds too
          allowed_workspaces = ("BraintreeDropIn.xcworkspace", "Braintree.xcworkspace", "PopupBridge.xcworkspace", "", None)
          allowed_projects = ("Demo/Demo.xcodeproj", "Demo.xcodeproj", "BraintreeDropIn.xcodeproj", "PopupBridge.xcodeproj", "", None)

          project = os.getenv("PROJECT")
          scheme = os.getenv("SCHEME")
          workspace = os.getenv("WORKSPACE")

          if scheme not in allowed_schemes:
              raise SystemExit(f"Invalid scheme: {scheme}. Allowed: {allowed_schemes}")
          if workspace not in allowed_workspaces:
              raise SystemExit(f"Invalid workspace: {workspace}. Allowed: {allowed_workspaces}")
          if project not in allowed_projects:
              raise SystemExit(f"Invalid project: {project}. Allowed: {allowed_projects}")

          print("Inputs validated successfully.")

      - name: Force Swift version to 5.0 in Demo target
        if: ${{ exists('Demo/Demo.xcodeproj/project.pbxproj')}}
        run: |
          sed -i '' 's/SWIFT_VERSION = 6.0;/SWIFT_VERSION = 5.0;/g' Demo/Demo.xcodeproj/project.pbxproj

      - name: Install CocoaPods (Demo)
        run: |
          if [ -f "Podfile.lock" ]; then
            pod install --repo-update
          fi

      # Optional cache to speed SPM fetches
      - name: Cache SwiftPM
        uses: actions/cache@v4
        with:
          path: |
            ~/.swiftpm
            ~/Library/Caches/org.swift.swiftpm
            ${{ github.workspace }}/DerivedData/SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: ${{ runner.os }}-spm-

      # 1) Resolve Swift packages for the SAME DerivedData/SourcePackages paths we will build with
      - name: Resolve Swift Packages (Xcode)
        run: |
          xcodebuild -resolvePackageDependencies \
            -workspace "${{ inputs.workspace }}" \
            -scheme "${{ inputs.scheme }}" \
            -derivedDataPath "${{ github.workspace }}/DerivedData" \
            -clonedSourcePackagesDirPath SourcePackages

      # 2) Initialize CodeQL in manual mode (Swift requires a manual build in many cases)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: swift
          build-mode: manual

      # 3) Build under CodeQL so extraction happens
      - name: Build
        run: |
          args=(
            "-configuration Debug"
            "-scheme ${{ inputs.scheme }}"
            "-derivedDataPath '${GITHUB_WORKSPACE}/DerivedData'"
            "-clonedSourcePackagesDirPath SourcePackages"
            "-scmProvider system"
            "-sdk iphonesimulator"
            "-destination 'platform=iOS Simulator,name=iPhone 15'"
            "CODE_SIGN_IDENTITY="
            "CODESIGNING_REQUIRED=NO"
            "CODE_SIGNING_ALLOWED=NO"
            "-workspace ${{ inputs.workspace }}"
            "clean"
            "build"
          )
          echo "xcodebuild ${args[*]}"
          eval "xcodebuild ${args[*]}"

      - name: Perform CodeQL Analysis
        id: codeql
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:swift"
          output: sarif-results
          upload: failure-only

      - name: Process & Upload SARIF
        uses: braintree/security-workflows/.github/actions/upload-sarif@main
        with:
          sarif_dir: ${{ env.CODEQL_ACTION_SARIF_RESULTS_OUTPUT_DIR }}
          filter_patterns: ${{ inputs['filter-patterns'] }}